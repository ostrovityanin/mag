
import React, { useState } from 'react';
import { useTelegramContext } from '@/components/TelegramProvider';
import { TelegramLoginButton } from '@/components/TelegramLoginButton';
import { ZodiacSelector } from '@/components/ui/zodiac-selector';
import { HoroscopeCard } from '@/components/HoroscopeCard';
import { FortuneCard } from '@/components/FortuneCard';
import { ChannelRequirement } from '@/components/ChannelRequirement';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Star, Cookie, Sparkles, TreePine } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useChannels } from '@/hooks/useChannels';
import { useUserSubscriptions } from '@/hooks/useUserSubscriptions';

export const DruidPage: React.FC = () => {
  const { user, isAuthenticated, hapticFeedback } = useTelegramContext();
  const { toast } = useToast();
  
  const [selectedSign, setSelectedSign] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('horoscope');
  const [isLoading, setIsLoading] = useState(false);
  const [todayHoroscope, setTodayHoroscope] = useState<string | null>(null);
  const [todayFortune, setTodayFortune] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –¥—Ä—É–∏–¥—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const { data: channels = [], isLoading: channelsLoading } = useChannels('druid_horoscope');
  const { 
    data: subscriptionData,
    subscriptions, 
    isChecking, 
    checkSubscription,
    isLoading: subscriptionsLoading 
  } = useUserSubscriptions();

  console.log('=== DRUID PAGE STATE ===');
  console.log('channels:', channels);
  console.log('subscriptions:', subscriptions);
  console.log('isChecking:', isChecking);
  console.log('checkSubscription —Ç–∏–ø:', typeof checkSubscription);
  console.log('checkSubscription —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!checkSubscription);

  const requiredChannels = channels.filter(c => c.required);
  const allChannelsSubscribed = requiredChannels.length > 0 && requiredChannels.every(c => subscriptions[c.id]);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50">
        <div className="container mx-auto px-4 py-6">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="flex items-center justify-center space-x-2 mb-2">
              <TreePine className="h-6 w-6 text-green-600" />
              <h1 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                –î—Ä—É–∏–¥—Å–∫–∏–µ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
              </h1>
            </div>
            <p className="text-sm text-gray-500 mt-2">
              –î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ä–æ–¥—ã –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞–º —Ç–∞–π–Ω—ã –±—É–¥—É—â–µ–≥–æ
            </p>
          </div>

          {/* Login Screen */}
          <div className="max-w-md mx-auto">
            <Card className="shadow-lg">
              <CardHeader className="text-center bg-gradient-to-r from-green-50 to-emerald-50">
                <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                  <TreePine className="h-8 w-8 text-green-600" />
                </div>
                <CardTitle className="text-xl text-green-800">
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
                </CardTitle>
                <p className="text-sm text-green-600 mt-2">
                  –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥—Ä—É–∏–¥—Å–∫–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
                </p>
              </CardHeader>
              <CardContent className="p-8">
                <TelegramLoginButton />
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  const handleSignSelect = (sign: string) => {
    hapticFeedback.selection();
    setSelectedSign(sign);
  };

  const handleGetHoroscope = async () => {
    if (!selectedSign || !allChannelsSubscribed) return;
    
    setIsLoading(true);
    hapticFeedback.impact('medium');
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockHoroscope = `–î—Ä–µ–≤–Ω–∏–µ –¥—Ä—É–∏–¥—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –¥–ª—è ${selectedSign}: –°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å–∏–ª—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤–∞–º –º—É–¥—Ä–æ—Å—Ç—å. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º. –≠–Ω–µ—Ä–≥–∏—è –∑–µ–º–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è.`;
      
      setTodayHoroscope(mockHoroscope);
      hapticFeedback.notification('success');
      
      toast({
        title: "–ì–æ—Ä–æ—Å–∫–æ–ø –≥–æ—Ç–æ–≤!",
        description: "–í–∞—à –¥—Ä—É–∏–¥—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—É—á–µ–Ω.",
      });
    } catch (error) {
      hapticFeedback.notification('error');
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetFortune = async () => {
    if (!allChannelsSubscribed) return;
    
    setIsLoading(true);
    hapticFeedback.impact('medium');
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const fortunes = [
        "–ö–∞–∫ –¥—Ä–µ–≤–Ω–∏–π –¥—É–± —Ä–∞—Å—Ç—ë—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ–≥—É—á–∏–º.",
        "–°–ª—É—à–∞–π —à—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞ - –æ–Ω –Ω–µ—Å—ë—Ç –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–µ–¥–∫–æ–≤.",
        "–¢–≤–æ—è —Å–∏–ª–∞ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –ø—Ä–∏—Ä–æ–¥–æ–π, –Ω–µ –±–æ—Ä–∏—Å—å —Å –Ω–µ–π.",
        "–ö–∞–∂–¥—ã–π –≤–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞.",
        "–ö–æ—Ä–Ω–∏ –¥–∞—é—Ç —Å–∏–ª—É, –Ω–æ –∫—Ä–æ–Ω–∞ —Ç—è–Ω–µ—Ç—Å—è –∫ —Å–≤–µ—Ç—É."
      ];
      
      const randomFortune = fortunes[Math.floor(Math.random() * fortunes.length)];
      setTodayFortune(randomFortune);
      hapticFeedback.notification('success');
      
      toast({
        title: "–î—Ä—É–∏–¥—Å–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å!",
        description: "–î—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã.",
      });
    } catch (error) {
      hapticFeedback.notification('error');
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (channelsLoading || subscriptionsLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50">
      <div className="container mx-auto px-4 py-6">
        {/* Header */}
        <div className="text-center mb-6">
          <div className="flex items-center justify-center space-x-2 mb-2">
            <TreePine className="h-6 w-6 text-green-600" />
            <h1 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
              –î—Ä—É–∏–¥—Å–∫–∏–µ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            </h1>
          </div>
          {user && (
            <p className="text-gray-600">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üåø
            </p>
          )}
          <p className="text-sm text-gray-500 mt-2">
            –î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ä–æ–¥—ã –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞–º —Ç–∞–π–Ω—ã –±—É–¥—É—â–µ–≥–æ
          </p>
        </div>

        {/* Subscription Requirements Screen */}
        {!allChannelsSubscribed && (
          <div className="max-w-2xl mx-auto">
            <Card className="shadow-lg">
              <CardHeader className="text-center bg-gradient-to-r from-green-50 to-emerald-50">
                <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                  <TreePine className="h-8 w-8 text-green-600" />
                </div>
                <CardTitle className="text-xl text-green-800">
                  –î–æ—Å—Ç—É–ø –∫ –¥—Ä–µ–≤–Ω–µ–π –º—É–¥—Ä–æ—Å—Ç–∏
                </CardTitle>
                <p className="text-sm text-green-600 mt-2">
                  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∏–¥—Å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã
                </p>
              </CardHeader>
              <CardContent className="p-6">
                {requiredChannels.length > 0 ? (
                  <ChannelRequirement
                    channels={requiredChannels}
                    subscriptions={subscriptions}
                    onCheckSubscription={checkSubscription}
                    isChecking={isChecking}
                  />
                ) : (
                  <div className="text-center py-8">
                    <TreePine className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600">
                      –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.
                    </p>
                    <p className="text-sm text-gray-500 mt-2">
                      –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* Main Content - Only visible after subscription */}
        {allChannelsSubscribed && (
          <div className="space-y-6">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
              <TabsList className="grid w-full grid-cols-2 bg-white shadow-sm">
                <TabsTrigger value="horoscope" className="flex items-center space-x-2">
                  <Star className="h-4 w-4" />
                  <span>–ì–æ—Ä–æ—Å–∫–æ–ø</span>
                </TabsTrigger>
                <TabsTrigger value="fortune" className="flex items-center space-x-2">
                  <TreePine className="h-4 w-4" />
                  <span>–ú—É–¥—Ä–æ—Å—Ç—å</span>
                </TabsTrigger>
              </TabsList>

              <TabsContent value="horoscope" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Star className="h-5 w-5 text-green-600" />
                      <span>–î—Ä—É–∏–¥—Å–∫–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {!selectedSign && (
                      <div>
                        <h3 className="text-lg font-medium mb-4 text-center">
                          –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
                        </h3>
                        <ZodiacSelector
                          selectedSign={selectedSign}
                          onSignSelect={handleSignSelect}
                        />
                      </div>
                    )}
                    
                    {selectedSign && !todayHoroscope && (
                      <div className="text-center space-y-4">
                        <p className="text-gray-600">
                          –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –¥—Ä–µ–≤–Ω–∏–µ —Å–∏–ª—ã –ø—Ä–∏—Ä–æ–¥—ã?
                        </p>
                        <Button
                          onClick={handleGetHoroscope}
                          disabled={isLoading}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                          size="lg"
                        >
                          {isLoading ? (
                            <>
                              <LoadingSpinner size="sm" className="mr-2" />
                              –ß–∏—Ç–∞—é –∑–Ω–∞–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã...
                            </>
                          ) : (
                            <>
                              <Star className="h-4 w-4 mr-2" />
                              –ü–æ–ª—É—á–∏—Ç—å –ì–æ—Ä–æ—Å–∫–æ–ø
                            </>
                          )}
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {todayHoroscope && selectedSign && (
                  <HoroscopeCard
                    zodiacSign={selectedSign}
                    content={todayHoroscope}
                    date={new Date().toISOString()}
                  />
                )}
              </TabsContent>

              <TabsContent value="fortune" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <TreePine className="h-5 w-5 text-green-600" />
                      <span>–î—Ä—É–∏–¥—Å–∫–∞—è –ú—É–¥—Ä–æ—Å—Ç—å</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {!todayFortune && (
                      <div className="text-center space-y-4">
                        <p className="text-gray-600">
                          –û—Ç–∫—Ä–æ–π—Ç–µ –¥—Ä–µ–≤–Ω—é—é –º—É–¥—Ä–æ—Å—Ç—å –¥—Ä—É–∏–¥–æ–≤ –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∂–∏–∑–Ω–∏!
                        </p>
                        <Button
                          onClick={handleGetFortune}
                          disabled={isLoading}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                          size="lg"
                        >
                          {isLoading ? (
                            <>
                              <LoadingSpinner size="sm" className="mr-2" />
                              –ü–æ–ª—É—á–∞—é –º—É–¥—Ä–æ—Å—Ç—å...
                            </>
                          ) : (
                            <>
                              <TreePine className="h-4 w-4 mr-2" />
                              –ü–æ–ª—É—á–∏—Ç—å –ú—É–¥—Ä–æ—Å—Ç—å
                            </>
                          )}
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {todayFortune && (
                  <FortuneCard
                    content={todayFortune}
                    date={new Date().toISOString()}
                  />
                )}
              </TabsContent>
            </Tabs>

            {/* Reset Button for Demo */}
            {(todayHoroscope || todayFortune) && (
              <div className="text-center mt-8">
                <Button
                  variant="outline"
                  onClick={() => {
                    setTodayHoroscope(null);
                    setTodayFortune(null);
                    setSelectedSign(null);
                    hapticFeedback.impact('light');
                  }}
                >
                  –°–±—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–µ–º–æ
                </Button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};
