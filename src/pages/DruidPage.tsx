
import React, { useState } from 'react';
import SimpleTelegramAuth from '@/components/SimpleTelegramAuth';
import { ZodiacSelector } from '@/components/ui/zodiac-selector';
import { HoroscopeCard } from '@/components/HoroscopeCard';
import { FortuneCard } from '@/components/FortuneCard';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Star, TreePine, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { TelegramUser } from '@/types/telegram';

export const DruidPage: React.FC = () => {
  const { toast } = useToast();
  
  const [user, setUser] = useState<TelegramUser | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [selectedSign, setSelectedSign] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('horoscope');
  const [isLoading, setIsLoading] = useState(false);
  const [todayHoroscope, setTodayHoroscope] = useState<string | null>(null);
  const [todayFortune, setTodayFortune] = useState<string | null>(null);
  const [environmentInfo, setEnvironmentInfo] = useState<any>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  React.useEffect(() => {
    console.log('=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM WEBAPP ===');
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ
    const envInfo = {
      hasWindow: typeof window !== 'undefined',
      hasTelegram: !!(window as any).Telegram,
      hasWebApp: !!(window as any).Telegram?.WebApp,
      userAgent: navigator.userAgent,
      referrer: document.referrer,
      location: window.location.href,
      windowName: window.name,
      telegramWebApp: (window as any).Telegram?.WebApp || null
    };
    
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ:', envInfo);
    setEnvironmentInfo(envInfo);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    const isTelegramByWebApp = !!(window as any).Telegram?.WebApp;
    const isTelegramByUserAgent = /Telegram/i.test(navigator.userAgent);
    const isTelegramByReferrer = document.referrer.includes('telegram') || document.referrer.includes('t.me');
    
    console.log('isTelegramByWebApp:', isTelegramByWebApp);
    console.log('isTelegramByUserAgent:', isTelegramByUserAgent);
    console.log('isTelegramByReferrer:', isTelegramByReferrer);
    
    // –°—á–∏—Ç–∞–µ–º —á—Ç–æ –º—ã –≤ Telegram –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –¥–∞–µ—Ç true
    const isInTelegram = isTelegramByWebApp || isTelegramByUserAgent || isTelegramByReferrer;
    
    console.log('–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –≤ Telegram:', isInTelegram);
    
    if (isInTelegram && (window as any).Telegram?.WebApp) {
      const tg = (window as any).Telegram.WebApp;
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp:', tg);
      
      tg.ready();
      tg.expand();
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
      let initUser: TelegramUser | null = null;
      
      if (tg.initDataUnsafe?.user) {
        initUser = tg.initDataUnsafe.user;
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ initDataUnsafe.user:', initUser);
      } else if (tg.initData) {
        console.log('–ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å initData:', tg.initData);
        try {
          const urlParams = new URLSearchParams(tg.initData);
          const userParam = urlParams.get('user');
          if (userParam) {
            initUser = JSON.parse(decodeURIComponent(userParam));
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ initData:', initUser);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', error);
        }
      }
      
      if (initUser && initUser.id) {
        setUser(initUser);
        setIsAuthenticated(true);
        console.log('–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–°–¢–ê–ù–û–í–õ–ï–ù:', initUser);
      } else {
        console.warn('–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ù–ê–ô–î–ï–ù –í TELEGRAM WEBAPP');
        // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SimpleTelegramAuth
      }
    } else if (isInTelegram) {
      console.log('–û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —á—Ç–æ –º—ã –≤ Telegram, –Ω–æ WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SimpleTelegramAuth
    } else {
      console.log('–ù–ï –≤ —Å—Ä–µ–¥–µ Telegram');
    }
  }, []);

  const handleSignSelect = (sign: string) => {
    setSelectedSign(sign);
  };

  const handleGetHoroscope = async () => {
    if (!selectedSign) return;
    
    setIsLoading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockHoroscope = `–î—Ä–µ–≤–Ω–∏–µ –¥—Ä—É–∏–¥—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –¥–ª—è ${selectedSign}: –°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å–∏–ª—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤–∞–º –º—É–¥—Ä–æ—Å—Ç—å. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º. –≠–Ω–µ—Ä–≥–∏—è –∑–µ–º–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è.`;
      
      setTodayHoroscope(mockHoroscope);
      
      toast({
        title: "–ì–æ—Ä–æ—Å–∫–æ–ø –≥–æ—Ç–æ–≤!",
        description: "–í–∞—à –¥—Ä—É–∏–¥—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—É—á–µ–Ω.",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetFortune = async () => {
    setIsLoading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const fortunes = [
        "–ö–∞–∫ –¥—Ä–µ–≤–Ω–∏–π –¥—É–± —Ä–∞—Å—Ç—ë—Ç –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ–≥—É—á–∏–º.",
        "–°–ª—É—à–∞–π —à—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞ - –æ–Ω –Ω–µ—Å—ë—Ç –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–µ–¥–∫–æ–≤.",
        "–¢–≤–æ—è —Å–∏–ª–∞ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –ø—Ä–∏—Ä–æ–¥–æ–π, –Ω–µ –±–æ—Ä–∏—Å—å —Å –Ω–µ–π.",
        "–ö–∞–∂–¥—ã–π –≤–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞ - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞.",
        "–ö–æ—Ä–Ω–∏ –¥–∞—é—Ç —Å–∏–ª—É, –Ω–æ –∫—Ä–æ–Ω–∞ —Ç—è–Ω–µ—Ç—Å—è –∫ —Å–≤–µ—Ç—É."
      ];
      
      const randomFortune = fortunes[Math.floor(Math.random() * fortunes.length)];
      setTodayFortune(randomFortune);
      
      toast({
        title: "–î—Ä—É–∏–¥—Å–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å!",
        description: "–î—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã.",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  if (isAuthenticated && user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50">
        <div className="container mx-auto px-4 py-6">
          <div className="text-center mb-6">
            <div className="flex items-center justify-center space-x-2 mb-2">
              <TreePine className="h-6 w-6 text-green-600" />
              <h1 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                –î—Ä—É–∏–¥—Å–∫–∏–µ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
              </h1>
            </div>
            <p className="text-gray-600">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üåø
            </p>
          </div>

          <div className="space-y-6">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
              <TabsList className="grid w-full grid-cols-2 bg-white shadow-sm">
                <TabsTrigger value="horoscope" className="flex items-center space-x-2">
                  <Star className="h-4 w-4" />
                  <span>–ì–æ—Ä–æ—Å–∫–æ–ø</span>
                </TabsTrigger>
                <TabsTrigger value="fortune" className="flex items-center space-x-2">
                  <TreePine className="h-4 w-4" />
                  <span>–ú—É–¥—Ä–æ—Å—Ç—å</span>
                </TabsTrigger>
              </TabsList>

              <TabsContent value="horoscope" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Star className="h-5 w-5 text-green-600" />
                      <span>–î—Ä—É–∏–¥—Å–∫–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {!selectedSign && (
                      <div>
                        <h3 className="text-lg font-medium mb-4 text-center">
                          –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
                        </h3>
                        <ZodiacSelector
                          selectedSign={selectedSign}
                          onSignSelect={handleSignSelect}
                        />
                      </div>
                    )}
                    
                    {selectedSign && !todayHoroscope && (
                      <div className="text-center space-y-4">
                        <p className="text-gray-600">
                          –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –¥—Ä–µ–≤–Ω–∏–µ —Å–∏–ª—ã –ø—Ä–∏—Ä–æ–¥—ã?
                        </p>
                        <Button
                          onClick={handleGetHoroscope}
                          disabled={isLoading}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                          size="lg"
                        >
                          {isLoading ? (
                            <>
                              <LoadingSpinner size="sm" className="mr-2" />
                              –ß–∏—Ç–∞—é –∑–Ω–∞–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã...
                            </>
                          ) : (
                            <>
                              <Star className="h-4 w-4 mr-2" />
                              –ü–æ–ª—É—á–∏—Ç—å –ì–æ—Ä–æ—Å–∫–æ–ø
                            </>
                          )}
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {todayHoroscope && selectedSign && (
                  <HoroscopeCard
                    zodiacSign={selectedSign}
                    content={todayHoroscope}
                    date={new Date().toISOString()}
                  />
                )}
              </TabsContent>

              <TabsContent value="fortune" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <TreePine className="h-5 w-5 text-green-600" />
                      <span>–î—Ä—É–∏–¥—Å–∫–∞—è –ú—É–¥—Ä–æ—Å—Ç—å</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {!todayFortune && (
                      <div className="text-center space-y-4">
                        <p className="text-gray-600">
                          –û—Ç–∫—Ä–æ–π—Ç–µ –¥—Ä–µ–≤–Ω—é—é –º—É–¥—Ä–æ—Å—Ç—å –¥—Ä—É–∏–¥–æ–≤ –¥–ª—è –ø–æ–∑–Ω–∞–Ω–∏—è –∂–∏–∑–Ω–∏!
                        </p>
                        <Button
                          onClick={handleGetFortune}
                          disabled={isLoading}
                          className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                          size="lg"
                        >
                          {isLoading ? (
                            <>
                              <LoadingSpinner size="sm" className="mr-2" />
                              –ü–æ–ª—É—á–∞—é –º—É–¥—Ä–æ—Å—Ç—å...
                            </>
                          ) : (
                            <>
                              <TreePine className="h-4 w-4 mr-2" />
                              –ü–æ–ª—É—á–∏—Ç—å –ú—É–¥—Ä–æ—Å—Ç—å
                            </>
                          )}
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {todayFortune && (
                  <FortuneCard
                    content={todayFortune}
                    date={new Date().toISOString()}
                  />
                )}
              </TabsContent>
            </Tabs>

            {(todayHoroscope || todayFortune) && (
              <div className="text-center mt-8">
                <Button
                  variant="outline"
                  onClick={() => {
                    setTodayHoroscope(null);
                    setTodayFortune(null);
                    setSelectedSign(null);
                  }}
                >
                  –°–±—Ä–æ—Å–∏—Ç—å –¥–ª—è –¥–µ–º–æ
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SimpleTelegramAuth
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50">
      <div className="container mx-auto px-4 py-6">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <TreePine className="h-8 w-8 text-green-600" />
            <h1 className="text-3xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
              –î—Ä—É–∏–¥—Å–∫–∏–µ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            </h1>
          </div>
          <p className="text-gray-600 text-lg">
            –î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ä–æ–¥—ã
          </p>
        </div>

        <SimpleTelegramAuth />
        
        {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
        {environmentInfo && (
          <Card className="max-w-md mx-auto mt-4">
            <CardHeader>
              <CardTitle className="text-sm">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-xs space-y-1">
                <div>Telegram –æ–±—ä–µ–∫—Ç: {environmentInfo.hasTelegram ? '‚úÖ' : '‚ùå'}</div>
                <div>WebApp API: {environmentInfo.hasWebApp ? '‚úÖ' : '‚ùå'}</div>
                <div>UserAgent —Å–æ–¥–µ—Ä–∂–∏—Ç Telegram: {/Telegram/i.test(environmentInfo.userAgent) ? '‚úÖ' : '‚ùå'}</div>
                <div>Referrer: {environmentInfo.referrer || '–Ω–µ—Ç'}</div>
                {environmentInfo.telegramWebApp && (
                  <div>
                    <div>initData: {environmentInfo.telegramWebApp.initData ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}</div>
                    <div>initDataUnsafe: {environmentInfo.telegramWebApp.initDataUnsafe ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}</div>
                    <div>user: {environmentInfo.telegramWebApp.initDataUnsafe?.user ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}</div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};
