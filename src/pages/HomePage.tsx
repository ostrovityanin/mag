import React, { useState } from 'react';
import { WelcomeScreen } from '@/components/WelcomeScreen';
import { ChannelRequirement } from '@/components/ChannelRequirement';
import { useTelegramContext } from '@/components/TelegramProvider';
import { useUserSubscriptions } from '@/hooks/useUserSubscriptions';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { Card, CardContent } from '@/components/ui/card';
import { AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { UserInfoHeader } from '@/components/UserInfoHeader';
import { useQueryClient } from '@tanstack/react-query';

export const HomePage: React.FC = () => {
  const { 
    isAuthenticated, 
    authenticatedUser, 
    authError, 
    isLoading: isAppLoading 
  } = useTelegramContext();
  
  const { 
    data: subscriptionData, 
    isLoading: subscriptionsLoading, 
    error: subscriptionsError,
    refetch
  } = useUserSubscriptions();

  const queryClient = useQueryClient();
  const [checkingChannelId, setCheckingChannelId] = useState<string | null>(null);

  const handleGetStarted = () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
  };

  const handleCheckSubscription = async (channelId: string) => {
    if (!channelId) return;
    setCheckingChannelId(channelId);
    console.log('[–ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò] channelId:', channelId);
    
    try {
      await refetch();
      await queryClient.invalidateQueries({
        queryKey: ['user-subscriptions'],
        refetchType: 'active',
      });
      await new Promise(res => setTimeout(res, 350));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ç—á–∞:', err);
    }
    setCheckingChannelId(null);
  };

  // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isAppLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-white text-lg">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</p>
        </div>
      </div>
    );
  }

  // –≠–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (authError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-red-600 mb-2">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600 mb-4">{authError}</p>
            <Button onClick={() => window.location.reload()} className="w-full">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!isAuthenticated) {
    return <WelcomeScreen onGetStarted={handleGetStarted} />;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  if (subscriptionsLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-white text-lg">–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...</p>
        </div>
      </div>
    );
  }

  // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫
  if (subscriptionsError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-red-600 mb-2">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫</h2>
            <p className="text-gray-600 mb-4">
              {subscriptionsError instanceof Error ? subscriptionsError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
            </p>
            <Button onClick={() => window.location.reload()} className="w-full">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
  const hasUnsubscribedChannels = subscriptionData?.hasUnsubscribedChannels ?? false;
  const missingChannels = subscriptionData?.missingChannels ?? [];
  const subscriptionsById = subscriptionData?.subscriptionsById ?? {};

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  if (hasUnsubscribedChannels) {
    return (
      <ChannelRequirement 
        channels={missingChannels} 
        subscriptions={subscriptionsById}
        onCheckSubscription={handleCheckSubscription}
        isChecking={checkingChannelId}
      />
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      <div className="container mx-auto px-4 py-8">
        <UserInfoHeader />
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üîÆ –ê—Å—Ç—Ä–æ –ü–µ—á–µ–Ω—å–µ
          </h1>
          <p className="text-lg text-gray-600">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤–∞—Å
          </p>
        </div>

        <div className="mt-12 text-center">
          <p className="text-sm text-gray-500">
            Powered by Telegram WebApp ‚Ä¢ –í–µ—Ä—Å–∏—è 2.0
          </p>
        </div>
      </div>
    </div>
  );
};
