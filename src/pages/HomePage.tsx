
import React from 'react';
import { WelcomeScreen } from '@/components/WelcomeScreen';
import { ChannelRequirement } from '@/components/ChannelRequirement';
import { HoroscopeCard } from '@/components/HoroscopeCard';
import { FortuneCard } from '@/components/FortuneCard';
import { useTelegramContext } from '@/components/TelegramProvider';
import { useUserSubscriptions } from '@/hooks/useUserSubscriptions';
import { useChannels } from '@/hooks/useChannels';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { Card, CardContent } from '@/components/ui/card';
import { AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { UserInfoHeader } from '@/components/UserInfoHeader';

export const HomePage: React.FC = () => {
  const { 
    isAuthenticated, 
    authenticatedUser, 
    authError, 
    isLoading: telegramLoading,
    logout 
  } = useTelegramContext();
  
  const { 
    data: subscriptionData, 
    isLoading: subscriptionsLoading, 
    error: subscriptionsError,
    refetch
  } = useUserSubscriptions();

  const { data: channels = [], isLoading: channelsLoading } = useChannels();

  const handleGetStarted = () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è Telegram –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  if (telegramLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-white text-lg">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...</p>
        </div>
      </div>
    );
  }

  if (authError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-red-600 mb-2">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p className="text-gray-600 mb-4">{authError}</p>
            <p className="text-sm text-gray-500">
              –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω (WelcomeScreen)
  if (!isAuthenticated) {
    return <WelcomeScreen onGetStarted={handleGetStarted} />;
  }

  // –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–æ –¥–æ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∫–∞–Ω–∞–ª–æ–≤
  if (subscriptionsLoading || channelsLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-white text-lg">–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...</p>
        </div>
      </div>
    );
  }

  if (subscriptionsError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-red-600 mb-2">–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫</h2>
            <p className="text-gray-600 mb-4">
              {subscriptionsError instanceof Error ? subscriptionsError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
            </p>
            <Button onClick={() => window.location.reload()} className="w-full">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // -------- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ channel.id ---------
  const hasUnsubscribedChannels =
    subscriptionData && typeof subscriptionData.hasUnsubscribedChannels === 'boolean'
      ? subscriptionData.hasUnsubscribedChannels
      : false;
  const missingChannels =
    subscriptionData && Array.isArray(subscriptionData.missingChannels)
      ? subscriptionData.missingChannels
      : [];

  // –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç subscriptions: –∫–ª—é—á ‚Äî id –∫–∞–Ω–∞–ª–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî true/false
  let subscriptionsById: Record<string, boolean> = {};
  if (
    subscriptionData?.debugInfo?.channels &&
    subscriptionData?.debugInfo?.checkResult?.subscriptions
  ) {
    const rawSubs = subscriptionData.debugInfo.checkResult.subscriptions;
    // debugInfo.channels: [{id, username, chat_id, name}]
    for (const channel of subscriptionData.debugInfo.channels) {
      const key = channel.chat_id || channel.username;
      // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–±–∞ –∫–ª—é—á–∞ –µ—Å—Ç—å –≤ subscriptions ‚Äî –æ—Ç–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç chat_id
      if (key && rawSubs.hasOwnProperty(key)) {
        subscriptionsById[channel.id] = !!rawSubs[key];
      }
    }
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  if (hasUnsubscribedChannels) {
    return (
      <ChannelRequirement 
        channels={channels.filter(c => missingChannels.some(mc => mc.id === c.id))} 
        subscriptions={subscriptionsById}
        onCheckSubscription={() => refetch()}
        isChecking={null}
      />
    );
  }

  // --- –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö ---
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      <div className="container mx-auto px-4 py-8">
        <UserInfoHeader />
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üîÆ –ê—Å—Ç—Ä–æ –ü–µ—á–µ–Ω—å–µ
          </h1>
          <p className="text-lg text-gray-600">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤–∞—Å
          </p>
        </div>
        {/* –ú–µ—Å—Ç–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫, –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        {/* <HoroscopeCard />, <FortuneCard /> –∏ –¥—Ä. –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Ç—É—Ç */}

        <div className="mt-12 text-center">
          <p className="text-sm text-gray-500">
            Powered by Telegram WebApp ‚Ä¢ –í–µ—Ä—Å–∏—è 2.0
          </p>
        </div>
      </div>
    </div>
  );
};
