
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertTriangle, ExternalLink, RefreshCw } from 'lucide-react';
import { LoadingSpinner } from '@/components/LoadingSpinner';

interface SubscribeScreenProps {
  missingChannels: Array<{
    chat_id: string;
    status: string;
    channel_name?: string;
    invite_link?: string;
  }>;
  onRefresh: () => void;
  isRefreshing: boolean;
  user?: {
    id: number;
    first_name?: string;
    username?: string;
  };
  onOpenChannel: (url: string) => void;
}

export const SubscribeScreen: React.FC<SubscribeScreenProps> = ({
  missingChannels,
  onRefresh,
  isRefreshing,
  user,
  onOpenChannel,
}) => {
  const getChannelUrl = (channel: { chat_id: string; channel_name?: string; invite_link?: string }) => {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª:', channel);
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –µ—Å—Ç—å invite_link, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (channel.invite_link && channel.invite_link.trim() !== '') {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º invite_link:', channel.invite_link);
      return channel.invite_link;
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ –µ—Å—Ç—å channel_name (username) –∏ —ç—Ç–æ –Ω–µ chat_id (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -)
    if (channel.channel_name && !channel.channel_name.startsWith('-')) {
      const username = channel.channel_name.replace('@', '');
      const publicUrl = `https://t.me/${username}`;
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É:', publicUrl);
      return publicUrl;
    }
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
    console.log('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞:', channel);
    return '#';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-md border-yellow-200">
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center space-x-2 text-yellow-700">
            <AlertTriangle className="h-5 w-5" />
            <span>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <p className="text-lg font-medium">
              –ü—Ä–∏–≤–µ—Ç{user?.first_name ? `, ${user.first_name}` : ''}!
            </p>
            <p className="text-sm text-gray-600 mt-2">
              –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:
            </p>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="space-y-2 mb-4">
              {missingChannels.map((channel, index) => {
                const channelUrl = getChannelUrl(channel);
                const isValidUrl = channelUrl !== '#';
                
                return (
                  <div key={channel.chat_id} className="flex items-center justify-between p-2 bg-white rounded border">
                    <div className="flex-1">
                      <span className="text-sm font-medium block">
                        {channel.channel_name || `–ö–∞–Ω–∞–ª ${index + 1}`}
                      </span>
                    </div>
                    {isValidUrl ? (
                      <Button 
                        onClick={() => {
                          console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É:', channelUrl);
                          onOpenChannel(channelUrl);
                        }}
                        size="sm"
                        className="bg-yellow-600 hover:bg-yellow-700"
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        –ü–µ—Ä–µ–π—Ç–∏
                      </Button>
                    ) : (
                      <span className="text-xs text-gray-500">
                        –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É
                      </span>
                    )}
                  </div>
                );
              })}
            </div>
            
            {missingChannels.length === 2 && (
              <div className="text-xs text-blue-600 bg-blue-50 p-2 rounded border border-blue-200">
                üí° –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∫–∞–Ω–∞–ª–∞. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∏—Ö –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ.
              </div>
            )}
          </div>

          <div className="pt-4 border-t">
            <p className="text-sm text-gray-600 mb-3">
              –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
            </p>
            <Button
              onClick={onRefresh}
              disabled={isRefreshing}
              size="lg"
              className="w-full"
            >
              {isRefreshing ? (
                <>
                  <LoadingSpinner size="sm" className="mr-2" />
                  –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                </>
              )}
            </Button>
          </div>

          <div className="text-xs text-gray-500 text-center">
            –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
