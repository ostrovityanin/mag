
import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { getDruidSign } from "@/utils/druid-signs";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –∏ –¥–Ω–µ–π
const MONTHS = [
  { value: 1, label: "–Ø–Ω–≤–∞—Ä—å" },
  { value: 2, label: "–§–µ–≤—Ä–∞–ª—å" },
  { value: 3, label: "–ú–∞—Ä—Ç" },
  { value: 4, label: "–ê–ø—Ä–µ–ª—å" },
  { value: 5, label: "–ú–∞–π" },
  { value: 6, label: "–ò—é–Ω—å" },
  { value: 7, label: "–ò—é–ª—å" },
  { value: 8, label: "–ê–≤–≥—É—Å—Ç" },
  { value: 9, label: "–°–µ–Ω—Ç—è–±—Ä—å" },
  { value: 10, label: "–û–∫—Ç—è–±—Ä—å" },
  { value: 11, label: "–ù–æ—è–±—Ä—å" },
  { value: 12, label: "–î–µ–∫–∞–±—Ä—å" },
];

function daysInMonth(month: number): number {
  // –∏—Å–ø–æ–ª—å–∑—É–µ–º 2024 –≥–æ–¥ —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å 29 –¥–Ω–µ–π –≤ —Ñ–µ–≤—Ä–∞–ª–µ (–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥)
  return new Date(2024, month, 0).getDate();
}

export const DruidHoroscopeCalculator: React.FC = () => {
  const [month, setMonth] = useState<number | "">("");
  const [day, setDay] = useState<number | "">("");
  const [result, setResult] = useState<ReturnType<typeof getDruidSign> | null>(null);
  const [error, setError] = useState<string | null>(null);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞
  const days =
    month !== "" ? Array.from({ length: daysInMonth(Number(month)) }, (_, i) => i + 1) : [];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setResult(null);
    if (month === "" || day === "") {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å.");
      return;
    }
    // –§–æ—Ä–º–∏—Ä—É–µ–º JS Date —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–∞ –∏ –¥–Ω—è. –ì–æ–¥ –ª—é–±–æ–π, —Ç.–∫. getDruidSign –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å.
    const inputDate = new Date(2024, Number(month) - 1, Number(day)); // 2024 –≥–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è —Ñ–µ–≤—Ä–∞–ª—è
    if (isNaN(inputDate.getTime())) {
      setError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.");
      return;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    if (Number(day) > daysInMonth(Number(month))) {
      setError("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è.");
      return;
    }

    const sign = getDruidSign(inputDate);
    if (!sign) setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç—ã.");
    else setResult(sign);
  };

  return (
    <div className="w-full max-w-md mx-auto py-10 animate-fade-in">
      <Card>
        <CardHeader className="text-center">
          <CardTitle>üå≥ –î—Ä—É–∏–¥—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-3">
            <label className="block text-sm font-medium text-gray-600 mb-1">
              –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:
            </label>
            <div className="flex items-center gap-2">
              {/* –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ */}
              <select
                className="border rounded-md px-3 py-2 text-sm"
                value={month}
                onChange={e => {
                  setMonth(e.target.value === "" ? "" : Number(e.target.value));
                  setDay(""); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–Ω—å –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞
                }}
                required
              >
                <option value="">–ú–µ—Å—è—Ü</option>
                {MONTHS.map(m => (
                  <option key={m.value} value={m.value}>{m.label}</option>
                ))}
              </select>
              {/* –í—ã–±–æ—Ä –¥–Ω—è */}
              <select
                className="border rounded-md px-3 py-2 text-sm"
                value={day}
                onChange={e => setDay(e.target.value === "" ? "" : Number(e.target.value))}
                required
                disabled={month === ""}
              >
                <option value="">–î–µ–Ω—å</option>
                {days.map(d => (
                  <option key={d} value={d}>{d}</option>
                ))}
              </select>
            </div>
            <Button type="submit" className="w-full mt-2">
              –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –∑–Ω–∞–∫
            </Button>
          </form>
          {error && (
            <div className="text-red-600 text-center mt-4">{error}</div>
          )}
          {result && (
            <div className="mt-8 p-4 rounded-lg bg-green-50 border border-green-200 text-center animate-fade-in">
              <div className="text-4xl mb-1">{result.emoji}</div>
              <div className="font-bold text-lg mb-2">{result.name}</div>
              <div className="text-sm text-gray-700">{result.description}</div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};
